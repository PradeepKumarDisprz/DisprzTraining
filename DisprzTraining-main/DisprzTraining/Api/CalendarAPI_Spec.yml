openapi: 3.0.3
info:
  license: 
    name: PradeepKumar
    url: https://localhost:7248/swagger/index.html
  title: User Appointments
  description: ''
  version: v1

servers:
  - url: https://localhost:7248/swagger/index.html
  - url: https://localhost:7248/swagger/index.html
security: 
  - ApiKeyAuth: []
  
paths:
 /v1/appointments:
    get: 
      summary: Fetch Appointments
      operationId: getAllAppointments
      tags: 
        -  Appointments
      parameters: 
        - name: offSet
          in: query
          required: true
          schema: 
            type: integer
            format: int32
        - name: Count
          in: query
          required: true
          schema: 
            type: integer
            format: int32
        - name: searchDate
          in: query
          schema: 
            type: string
            format: date-time
        - name: searchTitle
          in: query
          schema: 
            type: string
            format: string
      responses:
        '200':
          description: Listed an Array of Appointments By Date
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/AllAppointments"

    post:
      summary: Add new Appointment
      operationId: addNewAppointment
      tags:
        - Appointments
      requestBody:
        required: true
        description: Schema of New Appointment
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentDTO"
      responses:
        '201':
          description: New Appointment Created
          content:
            application/json:    
              schema:
                  $ref: "#/components/schemas/NewAppointmentId"
        '400':
          description: Past Date and Time is not allowed
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/ResponseError" 
        '409':
          description: Conflict Occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

 /v1/appointments/{appointmentId}:
    get:
      summary: Fetch Appointments by ID
      operationId: getAppointmentById
      tags:
        - Appointments
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Listed Appointment By Id
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/AppointmentDTO"
        '404':
          description: No Appointments Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

    put:
      summary: Update an existing Appointment
      operationId: updateAppointment
      tags:
      - Appointments
      parameters:
        - name: appointmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: appointment to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppointmentDTO"

      responses:
        '204':
          description: No Content
         
        '409':
          description: Conflict Occured
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"
        '404':
          description: No Appointment Found with the given Id
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/ResponseError" 
        '400':
          description: Past Date and Time is not allowed
          content: 
            application/json:
              schema: 
                $ref: "#/components/schemas/ResponseError"
        
    delete:
      summary: Delete an existing Appointment
      operationId: deleteAppointment
      tags:
      - Appointments
      parameters:
          - name: appointmentId
            in: path
            description: Appointment Id
            required: true
            schema:
              type: string
              format: uuid
      responses:
        '204':
          description: No Content
          
        '404':
          description: No Appointment found with Id specified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseError"

        
    
components:
  schemas: 
# List of Appointments
    AllAppointments:
      properties:
        count:
          type: integer
          format:  int32 
        isTruncated:
          type: boolean
          format: boolean
          example: true
        appointments:
          type: array
          items: 
            type: object
            properties: 
              appointmentId:
                type: string
                format: uuid
              appointmentstartTimeDate:
                type: string
                format: date-time
              appointmentEndTimeDate:
                type: string
                format: date-time
              appointmentTitle:
                type: string
                format: string
              appointmentDescription:
                type: string
                format: string
# single appointment
    AppointmentDTO:
      type: object
      properties: 
        appointmentstartTimeDate:
          type: string
          format: date-time
        appointmentEndTimeDate:
          type: string
          format: date-time
        appointmentTitle:
          type: string
          format: string
        appointmentDescription:
          type: string
          format: string
    NewAppointmentId:
      type: object
      properties: 
        appointmentId:
          type: string
          format: uuid
    
    ResponseError:
      type: object
      properties: 
        language: 
          type: string
          format: string
        errorMessage:
          type: string
          format: string
        errorCode:
          type: integer
          format: int32

  securitySchemes:
    ApiKeyAuth:       
      type: apiKey
      in: query      
      name: Access-Token
          